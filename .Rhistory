fluB_rep1_fit$RFU <- y_h
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit)
p1
p1
summary(fitted)
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
fluB_rep1 <- subset(df, Well == 'A1')
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU)
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1, start = list(Asym = max(fluB_rep1$RFU), xmid = 25, scal = 1) )
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit)
p1
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
fluB_rep1 <- subset(df, Well == 'A1')
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU)
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit)
p1
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in c("A1", "A2", "A3"))
{
fluB_rep1 <- subset(df, Well == well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU)
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit)
p1
}
df
subset(df, Well == "A3")
subset(df, Well == "A2")
subset(df, Well == "A1")
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in c("A1", "A2", "A3"))
{
fluB_rep1 <- subset(df, Well == well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU)
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit)
p1
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in c("A1", "A2", "A3"))
{
fluB_rep1 <- subset(df, Well == well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU)
print(fluB_rep1)
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit)
p1
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in c("A1", "A2", "A3"))
{
fluB_rep1 <- subset(df, Well == well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) +1
print(fluB_rep1)
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit)
p1
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in c("A1", "A2", "A3"))
{
fluB_rep1 <- subset(df, Well == well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) +1
print(fluB_rep1)
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit)
print(p1)
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in df$Well)
{
fluB_rep1 <- subset(df, Well == well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) +1
print(fluB_rep1)
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit)
print(p1)
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in df$Well)
{
fluB_rep1 <- subset(df, Well == well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) +1
print(fluB_rep1)
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit)
print(p1)
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in df$Well)
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) +1
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit)
print(p1)
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in unique(df$Well))
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) +1
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit)
print(p1)
}
?SSlogis
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in unique(df$Well))
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) +1
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
xmid <- summary(fitted)$coefficients[2]
TTR <- data.frame(Cycle = xmid, RFU = fluB_rep1$RFU[fluB_rep1$Cycle > xmid & fluB_rep1$Cycle < xmid + 1 ])
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit)
print(p1)
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in unique(df$Well))
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) +1
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
xmid <- summary(fitted)$coefficients[2]
TTR <- data.frame(Cycle = xmid, RFU = fluB_rep1$RFU[fluB_rep1$Cycle > xmid & fluB_rep1$Cycle < xmid + 1 ])
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit) +
geom_point(data = TTR, aes(Colore = 'blue'))
print(p1)
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in unique(df$Well))
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) +1
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
xmid <- summary(fitted)$coefficients[2]
TTR <- data.frame(Cycle = xmid, RFU = fluB_rep1$RFU[fluB_rep1$Cycle > xmid & fluB_rep1$Cycle < xmid + 1 ])
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit) +
geom_point(data = TTR, aes(Color = 'blue'))
print(p1)
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in unique(df$Well))
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) +1
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
xmid <- summary(fitted)$coefficients[2]
TTR <- data.frame(Cycle = xmid, RFU = fluB_rep1$RFU[fluB_rep1$Cycle > xmid & fluB_rep1$Cycle < xmid + 1 ])
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit) +
geom_point(data = TTR, aes(color = 'blue'))
print(p1)
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in unique(df$Well))
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) +1
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
xmid <- summary(fitted)$coefficients[2]
TTR <- data.frame(Cycle = xmid, RFU = fluB_rep1$RFU[fluB_rep1$Cycle > xmid & fluB_rep1$Cycle < xmid + 1 ])
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit) +
geom_point(data = TTR, aes(color = 'blue'))
print(p1)
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in unique(df$Well))
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) +1
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
xmid <- summary(fitted)$coefficients[2]
TTR <- data.frame(Cycle = xmid, RFU = y_h[xmid] ])
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'red')) +
geom_point(data = fluB_rep1_fit) +
geom_point(data = TTR, aes(color = 'blue'))
print(p1)
}
?aes
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in unique(df$Well))
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) +1
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
xmid <- summary(fitted)$coefficients[2]
TTR <- data.frame(Cycle = xmid, RFU = y_h[xmid] )
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'data')) +
geom_point(data = fluB_rep1_fit) +
geom_point(data = TTR, aes(color = 'TTR'))
print(p1)
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in unique(df$Well))
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) +1
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1)
y_h <- SSlogis(fluB_rep1$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
xmid <- summary(fitted)$coefficients[2]
TTR <- data.frame(Cycle = xmid, RFU = y_h[xmid] )
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_point(data = fluB_rep1, aes(color = 'data')) +
geom_point(data = fluB_rep1_fit) +
geom_point(data = TTR, aes(color = 'TTR'))
print(p1)
}
shiny::runApp()
setwd("~/Rprojects/fAST")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?SSlogis
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in unique(df$Well))
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) + 1
fluB_rep1_normal <- fluB_rep1
fluB_rep1_normal$RFU <- fluB_rep1_normal$RFU / max(fluB_rep1_normal$RFU)
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1_normal)
y_h <- SSlogis(fluB_rep1_normal$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
xmid <- summary(fitted)$coefficients[2]
TTR <- data.frame(Cycle = xmid, RFU = y_h[xmid] )
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_line(data = fluB_rep1, aes(color = 'data')) +
geom_line(data = fluB_rep1_fit, aes(color='fit')) +
geom_point(data = TTR, aes(color = 'TTR')) +
geom_point(data = fluB_rep1_normal, aes(y = RFU * max(fluB_rep1$RFU))) +
scale_y_continuous(sec.axis = ~.5, name = 'Normalized data')
print(p1)
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in unique(df$Well))
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) + 1
fluB_rep1_normal <- fluB_rep1
fluB_rep1_normal$RFU <- fluB_rep1_normal$RFU / max(fluB_rep1_normal$RFU)
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1_normal)
y_h <- SSlogis(fluB_rep1_normal$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
xmid <- summary(fitted)$coefficients[2]
TTR <- data.frame(Cycle = xmid, RFU = y_h[xmid] )
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_line(data = fluB_rep1, aes(color = 'data')) +
geom_line(data = fluB_rep1_fit, aes(color='fit')) +
geom_point(data = TTR, aes(color = 'TTR')) +
geom_point(data = fluB_rep1_normal, aes(y = RFU * max(fluB_rep1$RFU))) +
scale_y_continuous(sec.axis = ~./max(fluB_rep1$RFU), name = 'Normalized data')
print(p1)
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in unique(df$Well))
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) + 1
fluB_rep1_normal <- fluB_rep1
fluB_rep1_normal$RFU <- fluB_rep1_normal$RFU / max(fluB_rep1_normal$RFU)
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1_normal)
y_h <- SSlogis(fluB_rep1_normal$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
xmid <- summary(fitted)$coefficients[2]
TTR <- data.frame(Cycle = xmid, RFU = y_h[xmid] )
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_line(data = fluB_rep1, aes(color = 'data')) +
geom_line(data = fluB_rep1_fit, aes(y = RFU *max(fluB_rep1$RFU), color='fit')) +
geom_point(data = TTR, aes(color = 'TTR')) +
geom_line(data = fluB_rep1_normal, aes(y = RFU * max(fluB_rep1$RFU))) +
scale_y_continuous(sec.axis = ~./max(fluB_rep1$RFU), name = 'Normalized data')
print(p1)
}
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in unique(df$Well))
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) + 1
fluB_rep1_normal <- fluB_rep1
fluB_rep1_normal$RFU <- fluB_rep1_normal$RFU / max(fluB_rep1_normal$RFU)
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1_normal)
y_h <- SSlogis(fluB_rep1_normal$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
xmid <- summary(fitted)$coefficients[2]
TTR <- data.frame(Cycle = xmid, RFU = y_h[xmid] )
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_line(data = fluB_rep1, aes(color = 'data')) +
geom_line(data = fluB_rep1_fit, aes(y = RFU *max(fluB_rep1$RFU), color='fit')) +
geom_point(data = TTR, aes(y = RFU * max(fluB_rep1$RFU), color = 'TTR')) +
geom_line(data = fluB_rep1_normal, aes(y = RFU * max(fluB_rep1$RFU), color = 'Normal')) +
scale_y_continuous(sec.axis = ~./max(fluB_rep1$RFU), name = 'Normalized data')
print(p1)
}
?SSlogis
?SSlogis
summary(fitted)
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in unique(df$Well))
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) + 1
fluB_rep1_normal <- fluB_rep1
fluB_rep1_normal$RFU <- fluB_rep1_normal$RFU / max(fluB_rep1_normal$RFU)
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1_normal)
y_h <- SSlogis(fluB_rep1_normal$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
xmid <- summary(fitted)$coefficients[2]
print(xmid)
TTR <- data.frame(Cycle = xmid, RFU = y_h[xmid] )
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_line(data = fluB_rep1, aes(color = 'data')) +
geom_line(data = fluB_rep1_fit, aes(y = RFU *max(fluB_rep1$RFU), color='fit')) +
geom_point(data = TTR, aes(y = RFU * max(fluB_rep1$RFU), color = 'TTR')) +
geom_line(data = fluB_rep1_normal, aes(y = RFU * max(fluB_rep1$RFU), color = 'Normal')) +
scale_y_continuous(sec.axis = ~./max(fluB_rep1$RFU), name = 'Normalized data')
print(p1)
}
ceil(3.4)
round(3.4)
df <- data.frame(read.table('df3.csv',sep=',', header=TRUE, row.names = 1))
for (well in unique(df$Well))
{
fluB_rep1 <- subset(df, Well == well)
print(well)
fluB_rep1$RFU = fluB_rep1$RFU - min(fluB_rep1$RFU) + 1
fluB_rep1_normal <- fluB_rep1
fluB_rep1_normal$RFU <- fluB_rep1_normal$RFU / max(fluB_rep1_normal$RFU)
fitted <- nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = fluB_rep1_normal)
y_h <- SSlogis(fluB_rep1_normal$Cycle, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3])
fluB_rep1_fit <- fluB_rep1
fluB_rep1_fit$RFU <- y_h
xmid <- summary(fitted)$coefficients[2]
print(xmid)
TTR <- data.frame(Cycle = xmid, RFU = SSlogis(xmid, summary(fitted)$coefficients[1], summary(fitted)$coefficients[2],
summary(fitted)$coefficients[3]) )
p1 <- ggplot(data = fluB_rep1, aes(x = Cycle, y = RFU)) +
geom_line(data = fluB_rep1, aes(color = 'data')) +
geom_line(data = fluB_rep1_fit, aes(y = RFU *max(fluB_rep1$RFU), color='fit')) +
geom_point(data = TTR, aes(y = RFU * max(fluB_rep1$RFU), color = 'TTR')) +
geom_line(data = fluB_rep1_normal, aes(y = RFU * max(fluB_rep1$RFU), color = 'Normal')) +
scale_y_continuous(sec.axis = ~./max(fluB_rep1$RFU), name = 'Normalized data')
print(p1)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
