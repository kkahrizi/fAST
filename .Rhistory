manual_free_normalized <- manual_free_rna
for(subject in unique(manual_free_normalized$Subject)){
manual_free_normalized$Quantification[manual_free_normalized$Subject==subject] = 100*manual_free_normalized$Quantification[manual_free_normalized$Subject==subject]/
manual_free_normalized$Quantification[manual_free_normalized$Subject==subject & manual_free_normalized$Time==0]
}
ggplot(manual_free_rna,aes(x=Time,y=Quantification,colour=Subject)) +
geom_line(data=manual_free_normalized) +
xlab("Time (mins)") +
ylab("Percent of original free RNA remaining") +
ggtitle("Effective free RNA from swab")
library(dplyr)
library(ggplot2)
dataFile<-"Z:/Shared/Assay Development/01A Flu Test/Clinical Trials/2017-2018 Pilot Trial/Followup Testing/2018-01-22 Flu Trial RandD buffer degradation and elution test/20180204_data.csv"
rna_degrad_df<-as.data.frame(read.table(dataFile,header=TRUE,sep=',',stringsAsFactors = TRUE))
rna_degrad_normalized <- rna_degrad_df
for(subject in unique(rna_degrad_normalized$Subject)){
rna_degrad_normalized$Quantification[rna_degrad_normalized$Subject==subject] = 100*rna_degrad_normalized$Quantification[rna_degrad_normalized$Subject==subject]/
rna_degrad_normalized$Quantification[rna_degrad_normalized$Subject==subject & rna_degrad_normalized$Time==0]
}
ggplot(rna_degrad_normalized,aes(x=Time,y=Quantification,colour=Subject,linetype=Lysis)) +
geom_line(data=rna_degrad_normalized) +
xlab("Time (mins)") +
ylab("% of T0 RNA remaining") +
ggtitle("Total RNA from swab")
manual_only<-rna_degrad_df[rna_degrad_df$Lysis=="Manual",]
lysis_percent=0.6
manual_free_rna<-manual_only
for(subject in unique(manual_free_rna$Subject)){
manual_free_rna$Quantification[!(manual_free_rna$Time==0) & manual_free_rna$Subject==subject] =
manual_free_rna$Quantification[manual_free_rna$Time==0 & manual_free_rna$Subject==subject] -
manual_free_rna$Quantification[!(manual_free_rna$Time==0) & manual_free_rna$Subject==subject]
manual_free_rna$Quantification[manual_free_rna$Time==0 & manual_free_rna$Subject==subject] =
manual_free_rna$Quantification[manual_free_rna$Time==0 & manual_free_rna$Subject==subject]*lysis_percent;
manual_free_rna$Quantification[!(manual_free_rna$Time==0) & manual_free_rna$Subject==subject] =
manual_free_rna$Quantification[manual_free_rna$Time==0 & manual_free_rna$Subject==subject] -
manual_free_rna$Quantification[!(manual_free_rna$Time==0) & manual_free_rna$Subject==subject]
}
manual_free_normalized <- manual_free_rna
for(subject in unique(manual_free_normalized$Subject)){
manual_free_normalized$Quantification[manual_free_normalized$Subject==subject] = 100*manual_free_normalized$Quantification[manual_free_normalized$Subject==subject]/
manual_free_normalized$Quantification[manual_free_normalized$Subject==subject & manual_free_normalized$Time==0]
}
ggplot(manual_free_rna,aes(x=Time,y=Quantification,colour=Subject)) +
geom_line(data=manual_free_normalized) +
xlab("Time (mins)") +
ylab("Percent of original free RNA remaining") +
ggtitle("Effective free RNA from swab")
library(dplyr)
library(ggplot2)
dataFile<-"Z:/Shared/Assay Development/01A Flu Test/Clinical Trials/2017-2018 Pilot Trial/Followup Testing/2018-01-22 Flu Trial RandD buffer degradation and elution test/20180204_data.csv"
rna_degrad_df<-as.data.frame(read.table(dataFile,header=TRUE,sep=',',stringsAsFactors = TRUE))
rna_degrad_normalized <- rna_degrad_df
for(subject in unique(rna_degrad_normalized$Subject)){
rna_degrad_normalized$Quantification[rna_degrad_normalized$Subject==subject] = 100*rna_degrad_normalized$Quantification[rna_degrad_normalized$Subject==subject]/
rna_degrad_normalized$Quantification[rna_degrad_normalized$Subject==subject & rna_degrad_normalized$Time==0]
}
ggplot(rna_degrad_normalized,aes(x=Time,y=Quantification,colour=Subject,linetype=Lysis)) +
geom_line(data=rna_degrad_normalized) +
xlab("Time (mins)") +
ylab("% of T0 RNA remaining") +
ggtitle("Total RNA from swab")
manual_only<-rna_degrad_df[rna_degrad_df$Lysis=="Manual",]
lysis_percent=1
manual_free_rna<-manual_only
for(subject in unique(manual_free_rna$Subject)){
manual_free_rna$Quantification[!(manual_free_rna$Time==0) & manual_free_rna$Subject==subject] =
manual_free_rna$Quantification[manual_free_rna$Time==0 & manual_free_rna$Subject==subject] -
manual_free_rna$Quantification[!(manual_free_rna$Time==0) & manual_free_rna$Subject==subject]
manual_free_rna$Quantification[manual_free_rna$Time==0 & manual_free_rna$Subject==subject] =
manual_free_rna$Quantification[manual_free_rna$Time==0 & manual_free_rna$Subject==subject]*lysis_percent;
manual_free_rna$Quantification[!(manual_free_rna$Time==0) & manual_free_rna$Subject==subject] =
manual_free_rna$Quantification[manual_free_rna$Time==0 & manual_free_rna$Subject==subject] -
manual_free_rna$Quantification[!(manual_free_rna$Time==0) & manual_free_rna$Subject==subject]
}
manual_free_normalized <- manual_free_rna
for(subject in unique(manual_free_normalized$Subject)){
manual_free_normalized$Quantification[manual_free_normalized$Subject==subject] = 100*manual_free_normalized$Quantification[manual_free_normalized$Subject==subject]/
manual_free_normalized$Quantification[manual_free_normalized$Subject==subject & manual_free_normalized$Time==0]
}
ggplot(manual_free_rna,aes(x=Time,y=Quantification,colour=Subject)) +
geom_line(data=manual_free_normalized) +
xlab("Time (mins)") +
ylab("Percent of original free RNA remaining") +
ggtitle("Effective free RNA from swab")
library(dplyr)
library(ggplot2)
dataFile<-"Z:/Shared/Assay Development/01A Flu Test/Clinical Trials/2017-2018 Pilot Trial/Followup Testing/2018-01-22 Flu Trial RandD buffer degradation and elution test/20180204_data.csv"
rna_degrad_df<-as.data.frame(read.table(dataFile,header=TRUE,sep=',',stringsAsFactors = TRUE))
rna_degrad_normalized <- rna_degrad_df
for(subject in unique(rna_degrad_normalized$Subject)){
rna_degrad_normalized$Quantification[rna_degrad_normalized$Subject==subject] = 100*rna_degrad_normalized$Quantification[rna_degrad_normalized$Subject==subject]/
rna_degrad_normalized$Quantification[rna_degrad_normalized$Subject==subject & rna_degrad_normalized$Time==0]
}
ggplot(rna_degrad_normalized,aes(x=Time,y=Quantification,colour=Subject,linetype=Lysis)) +
geom_line(data=rna_degrad_normalized) +
xlab("Time (mins)") +
ylab("% of T0 RNA remaining") +
ggtitle("Total RNA from swab")
manual_only<-rna_degrad_df[rna_degrad_df$Lysis=="Manual",]
lysis_percent=0.6
manual_free_rna<-manual_only
for(subject in unique(manual_free_rna$Subject)){
manual_free_rna$Quantification[!(manual_free_rna$Time==0) & manual_free_rna$Subject==subject] =
manual_free_rna$Quantification[manual_free_rna$Time==0 & manual_free_rna$Subject==subject] -
manual_free_rna$Quantification[!(manual_free_rna$Time==0) & manual_free_rna$Subject==subject]
manual_free_rna$Quantification[manual_free_rna$Time==0 & manual_free_rna$Subject==subject] =
manual_free_rna$Quantification[manual_free_rna$Time==0 & manual_free_rna$Subject==subject]*lysis_percent;
manual_free_rna$Quantification[!(manual_free_rna$Time==0) & manual_free_rna$Subject==subject] =
manual_free_rna$Quantification[manual_free_rna$Time==0 & manual_free_rna$Subject==subject] -
manual_free_rna$Quantification[!(manual_free_rna$Time==0) & manual_free_rna$Subject==subject]
}
manual_free_normalized <- manual_free_rna
for(subject in unique(manual_free_normalized$Subject)){
manual_free_normalized$Quantification[manual_free_normalized$Subject==subject] = 100*manual_free_normalized$Quantification[manual_free_normalized$Subject==subject]/
manual_free_normalized$Quantification[manual_free_normalized$Subject==subject & manual_free_normalized$Time==0]
}
ggplot(manual_free_rna,aes(x=Time,y=Quantification,colour=Subject)) +
geom_line(data=manual_free_normalized) +
xlab("Time (mins)") +
ylab("Percent of original free RNA remaining") +
ggtitle("Effective free RNA from swab")
shiny::runApp()
setwd("~/Rprojects/fAST")
setwd("~/Rprojects/fAST")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?has_error
?has_error
shiny::runApp()
?has_error
?has_error
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
#Kamin Kahrizi, DiAssess 2018
if(!require(shiny)){install.packages("shiny")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(gtable)){install.packages("gtable")}
if(!require(tidyr)){install.packages("tidyr")}
if(!require(testit)){install.packages("testit")}
#if(!require(gridExtra)){install.packages("gridExtra")}
#if(!require(grid)){install.packages("grid")}
#Variables to find appropriate files
signalFileToken <- "Quantification Amplification Results_SYBR.csv"
labelFileToken <- "Quantification Summary_0.csv"
preferenceFile <- "preferences.csv"
TTRfile <- "TTR_replicates.csv"
rawDataFile <- "raw_data_long.csv"
amplificationCurvesFile <- "amplification_curves.png"
#Initialize global variables
reactive_data <- reactiveValues()
#Function to show error dialog
show_error_dialog <- function(errorString){
showModal(modalDialog(
title = "ERROR!",
errorString,
easyClose = FALSE
))
}
#Function to scan through files in path, return a data frame of sample file with labels as column headers
#e.g. Time Sample1 Sample2
#        1    0.4    0.5
#        2    0.4    0.5
annotate_data <- function(path, convertToMins, conversionFactor, TTRoffset){
#Scan through files in path for those matching sample and label tokens
files_in_folder<- list.files(path, full.names = TRUE)
signalFileName <- NULL
labelFileName <- NULL
for (fileName in files_in_folder){
if ( grepl(signalFileToken, fileName) ){
signalFileName <- fileName
} else if ( grepl(labelFileToken, fileName) ){
labelFileName <- fileName
}
}
#Shows dialog box if files could not be found
if(is.null( signalFileName ) | is.null( labelFileName )){
show_error_dialog("Missing either a data file, or sample file. Please check selected directory.")
return(NA)
}
#Now that we know all files of interest exist, we read from them
result <- tryCatch({
signal_df <- data.frame(read.table(signalFileName, header = TRUE , sep = ',', blank.lines.skip = TRUE))
signal_df <- signal_df[,colSums(is.na(signal_df)) < nrow(signal_df)]
}, error = function(err) {
show_error_dialog( paste("There is something wrong with:", signalFileName) )
return(NA)
}) #END reading from signal file
result <- tryCatch({
label_df <- read.table(labelFileName, header = TRUE , sep = ',', blank.lines.skip = TRUE)
}, error = function(err) {
show_error_dialog(paste("There is something wrong with:", labelFileName))
return(NA)
}) #END reading from label file
#Convert from wide format to long
signal_df_long <- gather( data = signal_df, key = "Well", value = "RFU", -Cycle)
#If convertToMins is TRUE, convert cycles to minutes using conversionFactor
if(convertToMins) {
signal_df_long$Cycle <- (signal_df_long$Cycle * conversionFactor + TTRoffset) / 60
}
#Add columns with sample name and replicate number
signal_df_long$Replicate <- 1
signal_df_long$Sample <- NA
for (well in unique(signal_df_long$Well)){
#Well coordinates in signal file have no leading zeroes, but those in the label file do, so we make a conversion
label <- paste(substr(well, 1, 1), formatC(strtoi(substr(well, 2, 3)), width = 2, flag = "0"), sep = '')
sample <- as.character(label_df$Sample[label_df$Well == label])
if ( sample %in% signal_df_long$Sample ) {
numOccurences = sum(!is.na(unique(signal_df_long$Well[signal_df_long$Sample == sample])))
signal_df_long$Replicate[signal_df_long$Well == well] = signal_df_long$Replicate[signal_df_long$Well == well] + numOccurences
}
signal_df_long$Sample[signal_df_long$Well == well] = sample
}
signal_df_long$Replicate <- factor(signal_df_long$Replicate)
return(signal_df_long)
}
##Function to make a separate subplot for each unique column name in df
#makeSubPlots <- function(df){
#        plots <- list()
#        index = 1;
#        for (cond in unique(df$Sample)){
#            local({
#               print(cond)
#               toPlot <- df[df$Sample == cond, ]
#               plot <- ggplot(toPlot, aes( x = Cycle, y = RFU, col = Well )) +
#                    geom_line() +
#                    xlab("Cycle") +
#                    ylab("RFU") +
#                    ggtitle(cond)
#               plots[[index]] <<- plot
#               })
#            index = index + 1
#        }
#        grobz <- lapply(plots, ggplotGrob)
#        format <- matrix(unlist(1:(index-1)), ncol = numPlotColumns, byrow = TRUE)
#
#        gt <- arrangeGrob(grobs = grobz, layout_matrix = format)
#y
#        return(gt)
#}
#Function to get TTR by midpoint method (TTR = midpoint of peak and baseline value)
getTTR_midpoint <- function(df_unsorted, baselineStart, baselineEnd, minDiff){
df <- df_unsorted[order(df_unsorted$Cycle),]
TTR_df <- data.frame(Well = NA, Sample = NA, TTR = NA, TTRSig = NA)
TTRindex = 1
for (well in unique(df$Well)) {
if (TTRindex > 1){
TTR_df[nrow(TTR_df)+1,] <- NA
}
TTR_df$Well[TTRindex]  = well
TTR_df$Sample[TTRindex] = as.character(unique(df$Sample[df$Well == well]))
well_subset <- df[df$Well == well,]
baselineValue <- mean(well_subset$RFU[ well_subset$Cycle > baselineStart & well_subset$Cycle < baselineEnd  ])
peakValue <- max(well_subset$RFU)
if( peakValue - baselineValue < minDiff  ) {
TTR_df$TTR[TTRindex] = NA
TTR_df$TTRSig[TTRindex] = NA
} else {
midpoint = (baselineValue + peakValue ) / 2
thresholdCycle = min(which(well_subset$RFU > midpoint))
TTR_df$TTR[TTRindex] = well_subset$Cycle[thresholdCycle]
TTR_df$TTRSig[TTRindex] = well_subset$RFU[thresholdCycle]
}
TTRindex = TTRindex + 1
}
return(TTR_df)
}
#Function to get TTR as inflection point of logistic fit curve
getTTR_logfit <- function(df_unsorted, minDiff){
df <- df_unsorted[order(df_unsorted$Cycle),]
TTR_df <- data.frame(Well = NA, Sample = NA, TTR = NA, TTRSig = NA, Scal = NA)
TTRindex = 1
for (well in unique(df$Well)) {
if (TTRindex > 1){
TTR_df[nrow(TTR_df)+1,] <- NA
}
TTR_df$Well[TTRindex]  = well
TTR_df$Sample[TTRindex] = as.character(unique(df$Sample[df$Well == well]))
well_subset <- df[df$Well == well,]
baselineValue <- min(well_subset$RFU)
peakValue <- max(well_subset$RFU)
baselineCorrected <- well_subset
baselineCorrected$RFU <- baselineCorrected$RFU - baselineValue + 1
dropped = 0
maxDropped <- 50
asm <- NA
xmid <- NA
scal <- NA
result <- tryCatch({
while (has_error(nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = baselineCorrected)) &
dropped < maxDropped) {
baselineCorrected <-
subset(baselineCorrected, Cycle < max(baselineCorrected$Cycle) - 1)
dropped = dropped + 1
}
fitted <-
nls(RFU ~ SSlogis(Cycle, Asym, xmid, scal), data = baselineCorrected)
asm <- summary(fitted)$coefficients[1]
xmid <- summary(fitted)$coefficients[2]
scal <- summary(fitted)$coefficients[3]
}, error = function(err) {
show_error_dialog(
paste(
"There may be something wrong with log regression of this data. Try
the midpoint TTR formula and let Kamin know"
)
)
return(NA)
}) #END reading from label file
if( is.na(asm) | is.na(xmid) | is.na(scal)  ) {
TTR_df$TTR[TTRindex] = NA
TTR_df$TTRSig[TTRindex] = NA
TTR_df$Scal[TTRindex] = NA
} else {
TTR_df$TTR[TTRindex] = xmid
TTR_df$TTRSig[TTRindex] = SSlogis(xmid, asm, xmid, scal) + baselineValue
TTR_df$Scal[TTRindex] = scal
}
TTRindex = TTRindex + 1
}
return(TTR_df)
}
#Function to make subplots and return a plot to be saved/displayed
makeSubPlots <- function(df, TTRdf, numPlotColumns, convertToMins){
if(convertToMins){
xAxis <- "Time (minutes)"
} else {
xAxis <- "Cycle"
}
df$Replicate <- factor(df$Replicate)
plot <- ggplot(df, aes( x = Cycle, y = RFU, col = Replicate  )) +
geom_line() +
xlab(xAxis) +
ylab("RFU") +
facet_wrap(~Sample, ncol = numPlotColumns) +
geom_point(aes(x = TTR, y = TTRSig), data = TTRdf, inherit.aes = FALSE )
return(plot)
}
shinyServer(function(input, output, session) {
#Observe event for preference saving
#Saves preferences to file called "preferences.csv" in the shiny installation folder
observeEvent(ignoreNULL = TRUE,
eventExpr = {
input$saveToFile
},
handlerExpr = {
result <- tryCatch({
write.csv(preferenceData, preferenceFile, row.names = FALSE)
}, error = function(err) {
show_error_dialog("Unable to write data file. Make sure no files from selected
directory are open")
return(NA)
}) #END reading from label file
showNotification("Data saved successfully")
})
#Observe event for preference saving
#Saves preferences to file called "preferences.csv" in the shiny installation folder
observeEvent(ignoreNULL = TRUE,
eventExpr = {
input$savePreferences
},
handlerExpr = {
preferenceData <- data.frame(defaultFolder = reactive_data$path,
convert = input$convertToMins,
conversionFactor = input$cycleConversionFactor,
TTRoffset = input$TTRoffset,
Method = input$TTRmethod,
baselineStart = input$baselineStart,
baselineEnd = input$baselineEnd,
amplitudeThreshold = input$minDiff,
numPlotColumns = input$numColumns,
plotHeight = input$plotHeight)
result <- tryCatch({
write.csv(preferenceData, preferenceFile, row.names = FALSE)
}, error = function(err) {
show_error_dialog("Unable to write preferences file. Make sure preferences.csv is not open
and that working directory is set to shiny installation.")
return(NA)
}) #END reading from label file
showNotification("Preferences saved successfully")
})
#Observe event for the folder selection dialog
#Upon successful selection of a folder, will scan its contents and extract relevant data
observeEvent(ignoreNULL = TRUE,
eventExpr = {
input$directory
},
handlerExpr = {
if (input$directory > 0) {
# launch the directory selection dialog with initial path read from the widget
reactive_data$path = choose.dir(default = readDirectoryInput(session, 'directory'))
# update the widget value
updateDirectoryInput(session, 'directory', value = reactive_data$path)
#Search directory and extract relevant data from signal and label file
reactive_data$signal_df <-
annotate_data(
reactive_data$path,
input$convertToMins,
input$cycleConversionFactor,
input$TTRoffset
)
write.table(reactive_data$signal_df, file = "df3.csv", sep = ",")
if (all(is.na(reactive_data$signal_df))) {
return()
}
if (input$TTRmethod == 'Midpoint') {
reactive_data$TTRdf <- getTTR_midpoint(
reactive_data$signal_df,
input$baselineStart,
input$baselineEnd,
input$minDiff
)
} else if (input$TTRmethod == 'Regression') {
reactive_data$TTRdf <-
getTTR_logfit(reactive_data$signal_df, input$minDiff)
}
#For each unique sample name, make a subplot with each amplification curve
reactive_data$output_plot <-
makeSubPlots(
reactive_data$signal_df,
reactive_data$TTRdf,
input$numColumns,
input$convertToMins
)
output$Plots <-
renderPlot({
print(reactive_data$output_plot)
}, height = input$plotHeight)
}
})
observeEvent(ignoreNULL = TRUE,
eventExpr = {
input$analyze
},
handlerExpr = {
reactive_data$signal_df <-
annotate_data(
reactive_data$path,
input$convertToMins,
input$cycleConversionFactor,
input$TTRoffset
)
if (all(is.na(reactive_data$signal_df))) {
return()
}
if (input$TTRmethod == 'Midpoint') {
reactive_data$TTRdf <- getTTR_midpoint(
reactive_data$signal_df,
input$baselineStart,
input$baselineEnd,
input$minDiff
)
} else if (input$TTRmethod == 'Regression') {
reactive_data$TTRdf <-
getTTR_logfit(reactive_data$signal_df, input$minDiff)
}
reactive_data$output_plot <-
makeSubPlots(
reactive_data$signal_df,
reactive_data$TTRdf,
input$numColumns,
input$convertToMins
)
output$Plots <- renderPlot({
print(reactive_data$output_plot)
}, height = input$plotHeight)
})
})
shiny::runApp()
shiny::runApp()
?ggsave
shiny::runApp()
shiny::runApp()
shiny::runApp()
userPreferences <- read.csv(preferenceFile)
userPreferences
userPreferences$defaultFolder
userPreferences$defaultFolder[1]
as.character(userPreferences$defaultFolder)
?updateDirectoryInput
View(updateDirectoryInput)
userPreferences <- read.csv(preferenceFile)
userPreferences
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
userPreferences <- read.csv(preferenceFile)
userPreferences$Method
as.character(userPreferences$Method)
as.character(userPreferences$Method)
shiny::runApp()
shiny::runApp()
userPreferences <- read.csv(preferenceFile)
userPreferences
as.character(userPreferences$Method)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
